文档名称：内核中的设计模式(design pattern in kernel)
文档维护：Xuefeng Chang(welfear@gmail.com)
文档创建：2012.11.1


创建型


Object Pool

Object Pool模式可以提升性能，尤其是在对象的分配、初始化成本高，使用频率高
但使用时间短的情况下。对象池可以设置对象池的大小和回收时间缓存预分配的对象。
NT和Linux都有简单的预分配缓存对象的机制，也就是Lookaside Cache机制。NT的
对象管理器使用延迟删除和垃圾回收机制实现真正意义上的对象池。在调用NtClose
关闭对象之后，对象使用的内存空间并不马上回收，而是挂在已删除对象列表之中，
并且被设置为删除。在新生成对象时，对象管理器先去查找已删除的同类对象。内核
定时启动垃圾回收工作线程回收过多的已删除对象。

Prototype

Prototype模式可设定类型的对象创建实例，通过拷贝这些原型创建新对象。例子如下：
class Make {
public:
    Make(Object1 *o1, Object2 *o2...);
    Object1 *make_c1(void) {c1->clone()}
    Object2 *make_c2(void) {c2->clone()}
    ......
};
Linux中有一个很典型的应用Prototype模式的系统调用――clone。它体现了Linux Kernel
开发者对进程、线程以及共享资源的理解。clone中flags参数可以指使clone所需的资源，
可以是文件系统信息或I/O环境信息或IPC资源或网络信息或地址空间，而是否clone地址
空间决定了系统会产生一个新的线程还是一个新的进程。
更有趣的是，操作系统还会提供浅拷贝的功能。NT的系统调用NtDuplicateObject可以在
不同的进程空间中复制内核对象的引用。常见的场景是使本进程也可以访问其它进程打开
系统资源。Linux提供了dup和dup2两个系统调用，它们可以实现进程内文件描述符复制，
dup2则主要用于抢占标准输入或标准输出描述符位置。Linux还存在着一种自动的浅拷贝
机制――Unix域。它可以在发送和接收两者之间传递多个文件描述符，并自动为接受进程
建立可用的文件描述符，提高了共享文件的效率。

Singleton

Singleton模式提供访问类的全局实例并且只有一个，它封装了类的初始化时间和方式。
这是一个简单又复杂的模式。习惯面向过程的程序员常常将它用来代替全局变量，以规避
团队编程规范中不许使用全局变量的条款。

在内核开发中，开发者通常是熟悉C语言的程序员，他们并不避讳直接使用全局变量。原因
是参与开发的程序员大多经验丰富，并有相当的程序设计能力。但从为应用程序提供服务
的角度看，内核有不得不设计系统调用读或者写它内部的某些全局变量。比如Windows的：
BOOL SystemParametersInfo(UINT Action, UINT Param, PVOID Param, UINT WinIni);
Action包括了10个不同的种类，每个种类的Param都有相应的全局的内核数据，两者组合
起来大概可以表示上百项不同的内容。

NT中存在一个更加奇特的函数，它未被微软公开却拥有着比官方文档更丰富的说明描述。
尽管MSDN中强调该API有可能在未来修改，但真有人相信吗？NtQuerySystemInfomation，
一个由5000+行代码实现的函数。这个霸气的函数说明了一个简单的道理，“清规戒律”
只适用于能力不足的人。通过C struct传递内核数据并不是一种讨巧的方法，而Windows
开发者似乎也没有更好的办法，他们在struct的第一项中放置cbSize，期望在以后的变化
里，Size就代表Version。Linux就聪明多了，如果Linux就是CUI的天下，那么为什么不
直接给它们字符串呢？通过特殊的文件系统，用简单的文件函数就读写内核数据，连格式
转换都省了。其实NT中也有类似的机制，特殊的树形结构除了文件系统之外，还可以是
NT特有的registry。注册表中的一些特殊键直接映射到内核变量上，因此通过注册表API
便可可访问内核变量，只不过这种机制常常由系统自带的软件使用而很少有人知道罢了。
不管怎么说，无论是结构体还是字符串都无法避免对数据版本的理解，形式反而是次要的。
那么C++中Singleton到底如何呢？
class Singleton {
public:
    static Singleton *instance(void) {
        static Singleton *_instance = 0;
        if (!_instance)
            for (_instance = singleton();
                 _instance && strcmp(name, s->name);
                 _instance = _instance->next);
        return _instance;
    }
protected:
    Singleton(const char *name) : name(name), next(0) { assert(this->name); }
    static Singleton *singleton(void) {
        static Singleton Singleton("default");
        return &Singleton;
    }
    static void RegisterSingleton(Singleton *singleton) {
        Singleton *s = Singleton::singleton();
        while (s->next)
            s = s->next;
        s->next = singleton;
    }
private:
    const char *name;
    Singleton *next;
};
class Singleton1 : public Singleton {
public:
    Singleton1(void) : Singleton("1") {
        RegisterSingleton(this);
    }
};
static Singleton1 Singleton1;

最开始的版本打算用std::map组织name和singleton，但最后还是基于简单的链表实现。
这个例子包括了实现Singleton模式的各种技巧，本例的设计以自然为原则，工程中使用的
代码或多或少会根据不同的原则有所修改。在第一次调用Singleton::instance()时初始化
实例可以避免集中初始化大量的Singleton引起的性能问题，又可以防止过早初始化带来的
初始化依赖问题。但如果必须尽早初始化，那么还需要再添加一个引爆器：
class Singleton {
    struct Creator {
        ObjectCreator(void) { 
            Singleton::instance();
        }
    };
    static Creator creator;                          
};

Builder

Builder模式将复杂的对象分解几个不同的部分，不同的Builder可以对不同部分按照不同
方式生成结果：
class Builder {
public:
    virtual void makePart1(Element *) = 0;
    virtual void makePart2(Element *) = 0;
    virtual void makePart3(Element *) = 0;
};
Maker::make(stream)
{
    while (element = stream->next()) {
        switch (element.type()) {
        case part1:
            builder->makePart1(element);
            break;
        case part2:
            builder->makePart2(element);
            break;
        case part3:
            builder->makePart3(element);
            break;
        default:
        }
    }
}
maker.setBuilder(&Builder1);
maker.make(stream);

内核内部的创建型模式很少见，因为内核模块结构简单，既没有面向对象语言提供的多态
机制也不需要想办法替换new操作符。而系统调用接口常常被设计成功能明确单一，具有
良好的正交性。然而NT中却存在特例：
NTSTATUS NtCreateSection(PHANDLE SectionHandle, ACCESS_MASK DesiredAccess,
    POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,
    PLARGE_INTEGER MaximumSize OPTIONAL, ULONG SectionPageProtection,
    ULONG AllocationAttributes, HANDLE FileHandle OPTIONAL);
内核是按照应用程序提供的文件句柄创建Section内核对象的。最后的FileHandle应该是
NtCreateFile生成的句柄，按照MSDN上的描述这里的File可以是：Files, File Streams,
Directories, Changer Device, Tape Drives, Communications Resources, Consoles,
Mailslots Pipes, 笔者再补充一个socket。其实就是内核中所有存在的文件系统驱动和
设备驱动所创建的文件或设备。

Factory Method

Factory Method模式定义一个创建对象的接口，让子类来决定实例化哪个类，也就是将一个
类实例化推迟到子类：
class Factory {
public:
    virtual Product *make(void) = 0;
};
for (int i = 0; i != count; i++)
    maker[i]->make();

Abstract Factory

Abstract Factory模式提供一组创建对象的接口来创建一系列相关或相互依赖对象：
class Factory {
public:
   virtual Product1 *CreateProduct1() = 0;
   virtual Product2 *CreateProduct2() = 0;
};

思考内核对象的正交性，上述两种模式便不会出现在内核中。这两种模式避免直接使用new
操作符，因为对象销毁很简单，但创建却十分复杂，面向对象语言提供的构造函数却又十分
简单并带有限制，这样一来工厂模式便有了用武之地。它们也可以看做是设计模式思想在
创建对象方面的特殊应用。


结构型


Facade

Facade模式为复杂的系统封装一个简单的接口，并且可以单独访问子系统。操作系统的
系统调用是一种相对简单的API，它们封装了操作系统内部若干子系统与子系统之间的
复杂细节。同时操作系统也会提供加载内核模块的机制用以扩展内核结构，而且将内核中
的部分代码以内核模块的形式加载可以减少编译内核的时间，提高开发者的工作效率。

Proxy

Proxy模式可以控制对象的访问权限，改变对象的访问方式，使对象和对象的访问方式
相分离。在C++中，基本的对象方式是指针或引用，而指针或引用都不那么“智能”，
标准库提供了基于代理模式的智能指针弥补这些不足，如C++98引入而在C++11中废弃的
auto_ptr，C++11引入shared_ptr和unique_ptr（替代auto_ptr）。操作系统并不信任
应用层的程序，它为应用程序提供了间接的内核对象访问机制。应用程序并不能直接获得
内核对象指针，在Linux中提供的是fd而在NT中则是handle。内核负责根据相应的Key找到
对应的内核对象，并继续完成该系统调用功能。特别的，NT内核使用的handle还能表示
更多语义，handle的最后2位保留给应用程序使用，而高位表明该handle是系统全局句柄
或是当前进程的句柄。

Adapter

Adapter模式将一类的接口转换为符合期望的另一种接口，使旧组件匹配新的系统接口。
可能是下面这种形式：
class Adapter: public Target, private Legacy {
};

或者：
class Adapter: public Target {
public: Adapter(Adaptee *);
};

NT在设计之初的目标便是超越Unix，兼容POSIX、OS/2、Windows等不同的子系统。NT并不
在系统调用接口基础上直接兼容各种子系统，而是借助各种Adapter动态链接库适配不同的
接口。在一种系统上兼容另一种系统通常还会需要一个该子系统的管理进程，用于维护该
子系统的公共数据，例如管理Windows子系统的csrss进程。而其它子系统在操作系统发展
过程中被逐步削弱不见了踪影。POSIX接口的实现被放在了C Runtime Library中，Win32
子系统提供的功能足够丰富以支撑POSIX，然而由于设计理念不同，兼容接口在细节上仍然
稍有不同。除此之外，socket与winsock、OpenGL与DirectX等都是用NT原生API以Adapter
的方式兼容其他不同标准的接口。
另一个相反的例子是Wine，一个在Linux平台上兼容Windows的开源项目。Wine有20年的发展
历史，并涉及到了很多的内核设计技术，然而更难的是兼容一个没有足够文档和实现参考的
系统。

N.B. Wine包含了一系列类似Windows的Adapter动态链接库和WineServer，为了兼容多种
Unix系统，它本身并不包含内核模块，但一个代号龙井的Wine衍生项目却单独为Linux
开发了Wine的内核模块。

N.B. 另一个号称兼容Android的项目也是使用Adapter模式？不知道，但闭源的Adapter
兼容开源的Adaptee不都是可耻的吗？

Bridge

Bridge模式的目标是从设计中抽象出其实现，使两者可以独自改变。这简直就是禅语，只要
是谈及设计模式的资料基本都会提到这句话。但Bridge模式的原则其实很简单，就是别在
滥用继承了，并列举了一个通过继承机制实现的糟糕设计。一个窗口系统需要兼容Windows,
Linux, MacOS三种平台，而窗口本身又有toplevel, child, popup三种。如果用继承方式
设计，那么最后我们将得到3 * 3种类。如果系统中扩充了dialog, button, label, date,
editor,    combobox之后，数量将会是3 * 6。但如果用组合方式设计只需要实现3 + 6个类。
Bridge将m * n降低到与m + n。
内核需要兼容各种体系结构，然而每种体系结构的硬件细节并不相同，内核是如果做到的？
这个问题首先和软件的分发方式有关，开源的Linux可以提供相应的编译参数，让用户自己
根据目标机器选择编译参数，而闭源NT就不得不通过安装程序检测相关硬件信息了，安装
程序自带所有支持的硬件体系相关的动态链接库，并根据刺探硬件信息选择对应的文件，
最后重名为hal.dll供启动内核使用。
大部分内核模块都是与硬件无关的，少数功能需要硬件提供的机制支持，例如内存管理、
线程调度、中断管理、同步机制等。从全局的角度看，Linux的调度管理确实是一种Bridge
模式，此类代码是如此少见而又难得。我们知道，Linux按照POSIX标准的要求实现了5种
调度策略：(SCHED_NORMAL, SCHED_BATCH, SCHED_IDLE), (SCHED_RR, SCHED_FIFO)。其中
前三种是由公平调度类(sched_fair)实现的，后两种是由实时调度类(sched_rt)实现的。
调度类结构定义了调度类的接口：
struct sched_class {
    next                : 下一个调度类指针
    enqueue_task()      : task入队
    dequeue_task()      : task出队
    yield_task()        : task让出cpu
    pick_next_task()    : 选择下一个被调度task
};
在真正进行调度时，调度管理器会调用context_switch函数，硬件相关的操作都封装在它
里面，主要有：switch_to和entry_lazy_tlb。前者负责跳转到新线程上下文，后者冲刷
CPU中MMU的相关TLB。每种硬件体系模块都提供了这两个函数，并在编译时已经建立好正确
的链接，这种特殊的Bridge竟然有编译器的参与。

Composite

Composite模式描述了一种用树形结构组织对象的方式，它允许单一访问对象或递归访问
多个对象。C++11(gcc 4.6.0)代码如下：
class Component {
public:
    virtual void do(void) = 0;
};
class Leaf : public Componet {
public:
    void do (void) {}
};
class Composite : public Component {
public:
    void do(void) {
        for (auto index : children)
            index->do();
    }
    void add(Component *component) {
        children.push_back(componet);
    }
private:
    std::list<Component *> children;
};

文件系统是一种更加抽象的Composite模式。目录被看做是特殊的文件，也就是Composite的
add可基于Component接口实现。无论是NT的NtQueryDirectoryFile或者Linux的getdents，
它们都将目录的查询当成是目录文件的一次读过程。如果当前目录的文件足够过而调用者
提供的缓冲区不足，而调用者若要遍历整个目录必然要进行多次调用，每次的读取位置便是
由文件seek操作的文件偏移记录的。
内核同样善于用树形结构组织各种内核对象，例如NT存在的对象管理子系统。Linux用结构
kobject和对应的辅助函数管理数据：
struct kobject {
    struct list_head entry;
    struct kobject *parent;
    struct kset *kset;
    struct kobj_type *ktype;
    struct sysfs_dirent *sd;
    struct kref kref;
};
kref用于访问计数，list_head用于连接同类对象，parent指向父亲，sd代表目录结构
并包含了孩子对象。ktype中包括了针对kobject的各种操作。

Decorator

Decorator模式用于动态组合相关对象依次完成一系列操作。C++代码如下：
class Decorator {
public:
    explicit Decorator(Decorator *d = 0) : d(d) {}
    virtual ~Decorator(void);
    virtual void do(void) {
        d->do();
    }
private:
    Decorator *d;
};
class Decorator1 : public Decorator {
public:
    explicit Decorator1(Decorator *d = 0) : Decorator(d) {}
    virtual ~Decorator1(void);
    void do(void) {
        Decorator::do();
    }
};
class Decorator2 : public Decorator {
public:
    explicit Decorator2(Decorator *d = 0) : Decorator(d) {}
    virtual ~Decorator2(void);
    void do(void) {
        Decorator::do();
    }
};
Decoratoor *d = new Decorator1(new Decorator2());
d->do();

NT的设备驱动管理使用了类似的机制管理各种硬件的驱动程序。NT I/O内核子系统动态生成
设备栈，以文件访问为例：
1.应用程序发起文件I/O请求。
2.内核查找卷设备，将请求发送给卷设备对应的文件系统驱动。
3.文件系统驱动有上层过滤驱动和下层过滤驱动和功能驱动（也就是它自己）。
4.如果没有缓存，文件系统驱动将请求发送到下面的磁盘设备驱动。
5.磁盘设备驱动同样有上层过滤驱动和下层过滤以及功能驱动三部分，请求换为SCSI形式。
6.接下来请求被发送到磁盘驱动器设备驱动，它访问真正的硬件设备，读写相应数据。

NT希望这个过程是可以动态配置的，上层驱动只需要将请求发送给下层驱动，但并不需要
了解下层驱动。这些配置信息保存在注册表：HKLM\SYSTEM\CurrentControlSet\Enum中。
而驱动程序只需要在调用I/O子系统提供的内核函数即可向下传递请求：
NTSTATUS IoCallDriver(PDEVICE_OBJECT DeviceObject, PIRP Irp);

Private Class Data

Private Class Data模式常用来解决面向对象语言的语法带来的工程问题。C++类的声明
通常会放在头文件中，这会使：

1.每次修改私有方法或变量都可能引起大范围的编译。
2.const变量必须在类初始化时便要决定值。
3.类成员变量名和类方法名冲、方法参数名冲突。
4.不同的成员变量不能分组区分访问。
5.暴露类的私有成员和数据结构。
好吧，其实也没有那么糟糕，除了1。不过，只要修改头文件之后尽快启动编译器就可以了。

因此，应用该模式的类应该这样设计：
class ClassPrivate;
class Class {
private:
    ClassPrivate *data;
};

在操作系统中这种模式却另有妙用：
当nIndex为GWLP_USERDATA时，它返回的是通过相应的Set函数设置的自定义指针。
ATL库巧妙的使用过私有指针。与MFC或Qt库不同的是，ATL库将hWnd与ATL类的对应关系
放在该私有指针中，利用系统提供的hWnd查找窗口对象的机制查找hWnd与类的关系。其它
图形库会自行建立索引关系，但降低了性能却又增加软件复杂度。

Linux fs.h: struct file {
/* needed for tty driver, and maybe others */
void *private_data;
};
本来为tty驱动提供的私有指针却在实现epoll机制用来，
struct eventpoll *ep = file->private_data;
私有数据不但可以用组织内部程序，还可以用于建立该对象与其它对象之间的联系。

Flyweight

Flyweight模式使用大量共享的细粒度对象减少对象的冗余。它本质上是一种索引，用索引
查找的时间换得对象所占的空间。内核中的存储模块设计会体现这种模式的思想。文件对象
并不记录文件在磁盘上位置信息，它只关心文件偏移和长度。而真正代表磁盘文件的是inode
结构，每个索引节点对应多个同文件名的文件对象。inode会转换文件偏移转和磁盘偏移，
这样一来，文件结构上只保留索引，而文件内容只有一份。再比如NTFS，ntfs需要提供每个
文件的权限信息，然而它并不记录所有文件的安全信息，安全信息存在元文件$Secure中，
大多数文件的权限信息是一致的，而少数被修改过的权限信息通过文件名作索引，引用安全
描述符。


行为型


Null Object

Null Object模式为系统提供了一个默认的行为，也就是什么都不做。Null Object模式
往往提供了一种语义，增强了系统的概念完整性。例如Linux系统中的/dev/null设备，
它在原有体系中补充了一个特例，在不违反原有原则的基础上实现了一类特殊的功能。
NT中也有一个类似的例子：Raw File System Driver。如果NT系统中的文件系统驱动都
未能成功地挂载到某个磁盘设备上时，NT会将Raw挂载到该磁盘设备。Raw驱动会将读写
请求发送到它下层的磁盘设备驱动，最大程度上减少卷设备挂载失败对系统的影响。
Null Object提高了系统的容错能力并补充了一类特例，既有合理性又具有特殊性。

Strategy

Strategy模式是通过定义一系列接口将实现细节封装起来，使得它们能在不同的情况下使用
不同的实现。Strategy模式在内核中非常常见，下面是C++代码：
class Context {
public:
    void LookupStrategy(int type) {
        if (type == 1)
            current = new Strategy1();
        else if (type == 2)
            current = new Strategy2();
        else if (type == 3)
            current = new Strategy3();
    }
    void do(void) {
        current->ops();
    }
private:
    Strategy *current;
};
class Strategy {
public:
    void ops(void) {
        strategy->do();
    }
private:
    virtual void do(void) = 0;
};
class StrategyN : public Strategy {
private:
    void do(void) {}
};

由于用户态程序不能直接访问驱动程序，那么内核必须在两者之间建立桥梁。比如VFS，
它在Linux中相当于Context和Stragtegy中的共同方法两部分，而各种文件系统驱动就是
不同的Strategy。应用程序访问不同的路径时，VFS会找到相应的文件系统驱动并建立文件
描述符与Stragte的关系。
更重要的是在内核中Context可以动态匹配应用程序的请求和当前已经注册的模块。匹配的
方式可以是某种路径，也可以直接将原始数据发送给已经注册的模块对其进行识别。
在Linux中mount, load executable file, lookup file path都会触发这种自动匹配过程，
它们有相似的结构和类似的工作方式。

N.B. 值得一提的是内核中的网络结构，NT的NDIS网络子系统和Linux的if/proto管理，它们
采用了Strategy和Decorator结合模式。网络子系统会将协议驱动和数据链路驱动分别与
接收到的数据包匹配，并将处理过的数据向后发送。

Template Method

Template Method模式定义一个操作中的算法的骨架，将一些步骤延迟到子类，这样子类
重新定义算法的某些步骤不改变算法的结构。
class Template {
public:
    void do(void) {
        step1();
        step2();
        step3();
    }
private:
    virtual void step1(void) = 0;
    virtual void step2(void) = 0;
    virtual void step3(void) = 0;
};
class BaseMethod {
private:
    void step1(void) {}
    void step2(void) {}
    void step3(void) {}
};
class Method1 : public BaseMethod {
private:
    void step1(void) {}
};
class Method2 : public BaseMethod {
private:
    void step2(void) {}
};
class Methon3 : public BaseMethod {
    void step3(void) {}
};

内核没有提供过可以替换某一过程中核心功能模块的机制，但可以在一些关键点上嵌入
一些过滤器。这种工作方式只能部分体现Template Method模式的功能，但这已经可以
满足内核设计中的相关需求。例如，Linux中的netfilter过滤机制，NT中的Upper Filter
Driver和Lower Filter Driver(结构模式而非行为模式)以及Windows的SetWindowsHookEx。
这些机制不仅可以工作在关键步骤上，还可以形成一条Decorator处理链。

N.B. 某些工作在内核空间的工具可能会替换掉一些结构体的函数指针，形成多态子类化
的效果，当然它们往往为了不影响正常的内核功能最后还会调用原来的函数指针。

Chain Of Responsibility

Chain of responsibility模式定义了一个命令接收对象的传送链，直到有对象处理它之前，
在它之前的每一个对象都有机会接收它。简单的说它就是面向对象的遍历列表链过程。
C++代码如下：
class Handler {
    Handler *_next;
public:
    Handler *next(void) { return _next; }
    void add(Handler *handler) { _next = handler; }
    void append(Handler *handler) {
        if (_next)  _next->append(handler);
        else        _next = handler;
    }
    virtual void handle(void) { _next->handle(); }
};
class Handler1 : public Handler {
public:
    void handle(void) {
        if (1) Handler::handle();
        else ;
    }
};
Handler1 one, two, three;
one.add(&two);
one.append(&three);
one.hande();

消息处理过程就是典型应用。Windows提供了一种类似的机制，当Windows处理系统中各种
消息时，它给应用程序参与处理这些消息提供了机会。应用程序只需用SetWindowsHookEx
注册自己的处理程序，并在自己的处理函数中调用CallNextHookEx将传递给下一个Hook。
Hook可以是鼠标消息、键盘消息、系统过滤消息、消息进入消息队列操作、调用窗口过程
操作和Shell消息。Shell消息是实现桌面环境的必要基础机制，在系统语言、辅助模式、
顶层窗口状态等发生变化时，Shell都有机会作出响应。

Observer

Observer模式定义一对多对象之间的依赖，当这个对象的状态改变时，它会通知所有的相关
对象使它们可以自动更新：
class Subject {
    std::list<Observer *> views;
public:
    void attach(Observer *observer) {
        views.push_back(observer);
    }
    void notify(void) {
        for (auto index, views)
            index->update();
    }
};
class Observer {
    Subject *_subject;
public:
    Observer(Subject *subject) : _subject(subject) {
        _subject->attach(this);
    }
    virtual void update(void) = 0;
};

再以窗口系统为例。Shell常常需要跟踪其它窗口的状态，并改变一些窗口的行为和响应消息
的方式。比如它要实现管理窗口的快捷键，把用户希望看到的窗口放到最前面，或是最小化
所有用户不想见到的窗口。Shell需要向图形系统注册全局快捷键，当用户使用这些热键时，
Shell就会收到消息通知。Shell需要调用RegisterHotKey请求接受热键通知，并在WM_HOTKEY
中作出合适的响应。再比如WM_MOUSEMOVE，当鼠标移进窗口时系统会向当前窗口发送
WM_MOUSEMOVE消息，只有当窗口通过SetCapture捕获鼠标移动或调用TrackMouseEvent请求
接收WM_MOUSEHOVER或WM_MOUSELEAVE时系统才会继续更新当前鼠标位置信息。这一经典模式
同样体现在关机过程中，并在用户态和内核态各使用一次。窗口程序可以通过
RegisterApplicationRestart注册WM_QUERYENDSESSION，驱动程序需要通过调用
IoRegisterShutdownNotification注册IRP_MJ_SHUTDOWN消息。

Iterator

Iterator模式提供一种访问一组对象的方法。高级语言的标准库总会提供容器和其相应的
迭代器。迭代器正是Iterator模式的典型实现。这里不再展示Iterator模式的代码，对于
C++程序员来说，SGI STL中迭代器的时候就是非常好的范例。
内核也会提供常用数据的容器和访问方法。在内核中最常见的还是双向循环列表结构，比如
在Linux内核中include\linux\list.h就详尽的实现了各种列表操作，这里会涉及到C程序员
常见的两个技巧：
kernel.h:
#define container_of(ptr, type, member) ({
    const typeof(((type *)0)->member) *__mptr = (ptr);
    (type *)((char *)__mptr - offsetof(type,member));})
计算结构体中某个成员的偏移，当结构体首地址为0时，p->member的值就是member的偏移。
在下面的链表遍历宏中便用到了这一技巧，第二个宏直接可以指明ListEntry作为结构体
成员的位置，并根据此位置计算结构体的首地址：
#define list_for_each(pos, head)
    for (pos = (head)->next; pos != (head); pos = pos->next)
#define list_for_each_entry_from(pos, head, member)
    for (; &pos->member != (head);
        pos = list_entry(pos->member.next, typeof(*pos), member))

Linux内核中还存在一种hash table list，也就是开链法哈希表中的链表。
struct hlist_node { struct hlist_node *next, **pprev; };
prev使用了第二个技巧，它没有像next使用struct hlist_node *而是直接指向next的地址。
next指针的类型为struct hlist_node **，pprev只在删除时使用，它直接将它前一个next
和后一个next联系起来。删除时只需要：
*this->pprev = this->next;

NT内核中提供了相似的链表机制。此外，NT还提供了一种不常见的容器――General Table。
这是一种用来辅助实现文件系统的查找树结构，但遍历树结构时却不是按照常见的树遍历
方式(inorder/postorder)，它内部还用链表将元素按时间顺序串起来。查找树的实现采用
Splay Tree，因此内核中的文件系统驱动除了FAT几乎没有使用它。高级文件系统会自己设计
树的算法，而不会采用简单、公共的算法。

Command

Command模式将调用对象的方法进行组织和管理。它可以将调用方式组织成先入先出队列或
优先队列，以实现用户操作的日志记录：
class Receiver {
public:
    void method1(void);
    void method2(void);
};
class Command {
public:
    virtual void execute(void) = 0;
};
template <typename Receiver>
class ActionCommand : public Command {
public:
    typedef void (Receiver::*Action)(void);
    ActionCommand(Receiver *receiver) :
        _receiver(receiver), _action(0), _name(0) {}
    void setAction(const char *name, Action action) {
        _name = name;
        _action = action;
    }
    const char *name(void) {
        return _name;
    }
    void execute(void) {
        if (_receiver && _action)
            (_receiver->*_action)();
    }
private:
    const char *_name;
    Action _action;
    Receiver *_receiver;
};
class Invoker {
public:
    virtual void invoke(void) = 0;
};
class QueueInvoker : public Invoker {
public:
    void invoke(void) {
        for (auto index : commands)
            index->execute();
    }
    void add(Command *command) {
        commands.push_back(command);
    }
private:
    std::list<Command *> commands;
};
Receiver *rece = new Receiver();
Invoker *invoker = new QueueInvoker();
invoker->add(new ActionCommand(rece, &Receiver::method1));
invoker->add(new ActionCommand(rect, &Receiver::method2));
invoker->invok();

内核没有类似的需求，也没有和Command模式十分相似的部分。但WinSock API的设计却很
有意思，值得一提。WinSock扩展了传统的伯克利Socket接口，比如AcceptEx和ConnectEx。
它们都将原来单一的命令附加了数据传输操作，从这个角度看是为了提供性能。在经典的
Socket工作流程中accept调用之后，Server会调用read，而connect调用之后，Client会调用
write。AcceptEx正是将accept和read两次调用合在一起，而ConnectEx则将connect和write
合在一起。

Interpreter

Interpreter模式描述一种文法解释器。对于这种模式笔者没有相关经验也没有找到优雅的
解决方案，因此：
FIXME.

一般来说内核也不会提供语法分析器之类的工具。这里确实存在一处例外，NT文件系统
运行时库提供了通配符的分析函数，用于兼容DOS文件系统中各种奇怪的文件名命名规则。
当然在内核中分析Wildcard Character也不用Interpreter模式，它只是实现了一个很小巧的
DFA。

Mediator

Mediator模式是一种十分常见的模式，它是如此常见以致程序员们忽视掉它居然也算一种
设计模式。Mediator定义一个管理对象，该对象封装了一组同类对象行为。Mediator表示了
这组对象的集体行为。简单的说，内核中的各种管理器就是一种Mediator。程序员在实现
系统中的各种对象时，常常会写出相应的管理器帮助他们管理这些对象。Mediator并不是
超市，它更像是机场或是加油站。

State

State模式描述了一种有限状态机的实现。它将对象的内部状态和行为分离，便于
系统维护状态之间的关系，独立地添加新的状态。C++代码如下：
class State {
    int _state;
public:
    State(int state) : _state(state) {}
    virtual int up(Machine *m) {}
    virtual int mid(Machine *m) {}
    virtual int down(Machine *m) {}
    int state(void) { return _state; }
};
class State0 : public State {
    int up(Machine *m) { return -1; }
    int mid(Machine *m) { m->setCurrent(new State1()); }
    int down(Machine *m) { m->setCurrent(new State2()); }
public:
    State0(void) : State(0) {}
};
class State1 : public State {
    int up(Machine *m) { m->setCurrent(new State0()); }
    int mid(Machine *m) { return -1; }
    void down(Machine *m) { m->setCurrent(new State2()); }
public:
    State1(void) : State(1) {}
};
class State2 : public State {
    int up(Machine *m) { m->setCurrent(new State0()); }
    int mid(Machine *m) { m->setCurrent(new State1()); }
    int down(Machine *m) { return -1; }
public:
    State2(void) : State(2) {}
};
class Machine {
    State *current;
public:
    Machine(State *state) { current = state; }
    void up(void) { current->up(this); }
    void mid(void) { current->mid(this); }
    void down(void) { current->down(this); }
    setCurrent(State *state) {
        delete current;
        current = state;
    }
};
void(Machine::*ptrs[])(void) = {
    Machine::up, Machine::mid, Machine::down
};

Machine machine;
(machine.*ptrs[0])();
(machine.*ptrs[1])();
(machine.*ptrs[2])();

内核中有一处State模式的典型应用，即TCP协议状态管理。但内核没有使用State模式管理
TCP协议状态。TCP共有11种状态：
CLOSED, LISTEN, SYN_SENT, SYN_RCVD, ESTABLISHED,
FIN_WAIT_1, FIN_WAIT_2, CLOSE_WAIT, LAST_ACK, CLOSING, TIME_WAIT.
socket函数共有14个：
socket, bind, listen, connect, accept, send, select, poll, close, shutdown,
gethostbyname, gethostbyaddr, getsockopt, setsockopt.

内核开发者只是用if, else简单的语法管理如此复杂庞杂的状态机，如果添加状态或函数，
那么所有TCP状态相关的代码恐怕都要顺理一遍才行。除非是内核网络部分已经十分成熟，
否则TCP状态机真应该重新设计与实现。

Memento

Memento模式是一种机制，提供了类似编辑器中的Undo, Redo功能。它提供了撤销或回滚之前
对象状态的能力。下面简单说明这种日志技术：
class Memento {
    friend class Object;
};
class Object {
public:
    Memento *createMemento(void) { return new Memento(); }
    void restoreMemento(Memento *m) { m = m; }
};
class Logger {
    typedef void (Object::*Action)(void);
    struct Command {
    public:
        Object *receiver;
        Action action;
    };
    static std::list<Command *> commandList;
    static std::list<Memento *> mementoList;
public:
    void do(Object *reciver, Action action) {
        (reciver->*action)();
        mementoList[count] = command->reciver->createMemento();
        commandLIst[count] = new command(reviver, action);
        count += 1;
    }
    void undo(void) {
        commandList[count]->receiver->restoreMemento(mementoList[count]);
        count -= 1;
    }
    void redo(void) {
        (commandList[count]->receiver->*(commandList[count]->action))();
        count += 1;
    }
};

内核不会像编辑器一样提供无限次的undo/redo功能，但当内核发现错误时它会将当前进程的
状态信息尽可能的保留下来为程序员调试提供线索。当然，如果是内核自己发生错误它也会
尽可能的保留CPU上下文，停止系统运行。最常见的是NT系统的蓝屏，某个驱动程序在IRQL
过高时触发了PageFault，从而引发NT的BugCheck。NT还可生成minidump文件供Windbg分析。

Visitor

Visitor模式提供了一种多态遍历一组对象的方法。Visitor采用双重分发的方式处理每种
不同的Visitor和Element，导致Visitor模式过于灵活与复杂。内核不是杂货商店，它不
需要在各种不同商品中统计它们的总价格或重量。内核中遍历各种数据的操作很常见，但
它们常常是统一方式访问同类数据，因此对于高度结构化的内核结构来说，Visitor似乎是
不必要的：
class Element {
public:
    virtual void accept(Visitor *v) = 0;
};
class Element1 {
public:
    void accept(Visitor *v) { v.visit(this); }
    int fetch(void) { return value; }
};
class Element2 {
public:
    void accept(Visitor *v) { v.visit(this); }
    int get(void) { return value; }
};
class Element2 {
public:
    void accept(Visitor *v) { v.visit(this); }
    int query(void) { return value; }
};
class Visitor {
public:
    virtual void visit(Element1 *e) = 0;
    virtual void visit(Element2 *e) = 0;
    virtual void visit(Element3 *e) = 0;
};
class PriceVisitor {
    int count;
public:
    void visit(Element1 *e) {
        count += e->fetch();
    }
    void visit(Element2 *e) {
        count += e->get();
    }
    void visit(Element3 *e) {
        count += e->query();
    }
};
for (auto index, list) {
    list[index]->accept(PriceVisitor);
}
