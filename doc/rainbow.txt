文档名称：Rainbow愿景文档
文档维护：Xuefeng Chang(welfear@gmail.com)
文档创建：2010.9.21



背景：
――


传统的数据备份软件往往是即时备份数据。常见的方法有两种：一种是积累备份，
另一种是差异备份。积累备份是指备份完整数据之后，每次只需备份更新过的数据；
差异备份是指只备份当前与初始数据的差异。备份的工具有dd、cpio、tar、dump、
rsync、7z等。它们或在磁盘级或在文件级对数据保存压缩数据或镜像数据。它们的
缺点是只能保存即时数据而无法保存实时数据，并且操作繁杂，保存的数据难以管理。
RAID、NAS、MAC的时间胶囊亦各有优缺点，Rainbow无论在使用上还是在原理上和它们
并不相同。



需求：
――


开源软件Bacula是针对上述问题而开发的重量级自动备份软件。它需要配置复杂的文件和
安装额外的数据库。然而有些用户希望使用一种灵巧、轻快、简单、方便的软件解决
局域网数据实时备份问题。很多公司的备份方法是每到周五人工为每个机器打包备份。
有一天发生断电，当日数据还是会丢失。因此实时备份就显得尤其重要，再结合软件工程
代码管理思想(SCM)就产生了一个新的想法――Rainbow。它专注于提供解决实时自动数据
备份问题的方案。无论对于企业或个人，数据的价值都无法估量，因此，Rainbow也具有
使用价值和现实意义。



方案：
――


Rainbow的技术意义大于应用意义。诚然，它也肯定不是要挑战已有的产品。如果说有
改进，那一定体现在纯粹上。它应该是廉价的、高效的、轻巧的、实用的和稳定的。
为了备份各种格式的文件，Rainbow在内核态实现文件数据的拦截。拦截技术按照操作系统
的不同而不同。Linux上，拦截可以放在文件系统和磁盘块层两个位置，但考虑到文件系统
缓存的影响，因此拦截定位在文件系统向磁盘写入前。这不会深入Disk Driver的内部。而
Windows上，拦截使用文件系统驱动过滤驱动实现，这是由NT的内核结构决定的。Rainbow
使用很简单，比如可以设置为一周时间，在一周内数据都是可以还原的，频率可以设置为
每天备份。因此，最坏情况是服务端保存7倍于客户端磁盘上的数据。用户可以根据服务器
磁盘空间设置备份最长时间和备份频率两个参数。超过备份最长时候后，服务端自动释放
之前的备份数据( git rebase :-) )。重新快照的时间很短，类似git，它只是移动指针。
Rainbow采用简单的客户机/服务器模型。最好的情况是用户感觉不到备份正在实时进行。

C:client  S:server


        +------+                      +------+
        |  C   |                      |  C   |
        +------\                     /+------+
                \      +-----+      /
                 ------+  S  +------
                /      +-----+      \
        +------/                     \+------+
        |  C   |                      |  C   |
        +------+                      +------+


客户端需输入备份目录路径、备份频率、备份数据总数等参数；服务端需文件大小限制、
内存使用限制等参数。下面分别描述两端设计：

Client:

        +--------------+      +----------------+   +------+
        |    File      |      | Rainbow Daemon |<->| rtmq |
        |    Reques    |      +----+------+----+   +------+
        +------+-------+           |      ^
               |                   |      |               ring3
        -------+-------------------+------+--------------------
               |                   |      |               ring0
        +------v-------+           |      |
        |    File      |           |      |
        |    System    |           |      |
        +------+-------+      +----v------+----+
               +------------->| Rainbow Driver |
               |              +----------------+
        +------v-------+
        |    Disk      |
        |    Driver    |
        +--------------+

Rainbow Daemon接收从Rainbow Driver采集的文件写入数据，以扇区为单位。它向
Rainbow Server发送备份数据，它使用rtmq接口。rtmq实现远程Message，它类似于
Unix IPC机制的Message，rtmq使用了相似的接口。Rainbow Driver监控目标文件夹
的写入数据并实时采集。

Server:

        +----------------------------+
        |                            |     +------+
        |   Rainbow Storage Server   |<--->| rtmq |
        |                            |     +------+
        +----+-------+-----------+---+
             |       |           |
        +----v-------v----+    +-v+  +--+  +--+
        | +--+ +--+ +--+  |    |D1|  |D2|  |D3|
        | |C1| |C2| |C3|  |    |  |  |  |  |  |
        | +--+ +--+ +--+  |    |  |  |  |  |  |
        | +-----+ +-----+ | +->+--+  |  |  |  |
        | |TREE1| |TREE2| | |  |  |  |  |  |  |
        | +-----+ +-----+ | |  +--+  |  |  |  |......
        | +-----+ +-----+ | |  |  |  |  |  |  |
        | |BLOB1| |BLOB2| | |  |  |  |  |  |  |
        | +--+--+ +--+--+ | |+>+--+  |  |  |  |
        |    |       +----+-+| |  |  |  |  |  |
        |    +------------+--+ |--|  |  |  |  |
        +-----------------+    +--+  +--+  +--+

Rainbow Storage实现了存储结构。一个管理文件用于实现统计所有计算机上的文件修改。
它使用树状结构记录每台计算机上文件系统的变化情况，并记录了它们在数据文件的
偏移位置。每台计算机对应一个数据文件。数据文件可以设置最大配额。



设计：
――


Rainbow由三个独立的部分组成：Rainbow、RTMQ、DIG。RTMQ是一个通信框架，而DIG是
一个存储框架。RTMQ提供基本的网络通信支持，根据数据类型的不同它将数据分发至不同
的组件。RTMQ至少应该提供一种默认的组件处理简单的消息队列数据，而对于Rainbow来说
它也应该提供一种RTMQ处理组件。DIG提供数据的缓存和储存支持。DIG支持简单Key-Value
结构也支持树形结构。DIG在一个文件中实现一个简单文件系统，并对超过一定数目的Tree
和Blob进行查找优化。DIG默认的管理块大小为4KB。Rainbow通过DIG的Tree和Blob管理
文件的改动。每个Blob记录某一文件1MB空间的变化情况，这大概需要256KB的空间。
DIG逻辑图如下：

T:Tree, B:Blob

+-----+    +-------+    +-------+     +-------+
|C1(T)|--->|Dir1(T)|--->|Dir2(T)|---->|File(T)|
+-----+    +-------+    +-------+     +-------+
|                                     |
|   +----------------+                |   +-----------------+
+-->|Control Block(B)|                +-->| 0~1MB Record(B) |
    +----------------+                |   +-----------------+
                                      |   +-----------------+
                                      +-->| 1~2MB Record(B) |
                                          +-----------------+

文件实际数据保存在另外的文件中，Record只是记录了时间和偏移。数据文件有自己的
管理方法，它主要由文件位图和数据块组成。
Rainbow的客户端由内核模块和数据收发进程组成。选择内核实现方案完全是基于备份数据
的实时性和完整性考虑的――Driver更早也更透明。在Linux中通过Hook sys_open过滤
监控目录，如果open成功，则还要进一步替换file system在address_space的函数指针；
在Windowsz中，则必须要编写文件系统过滤驱动实现，通过Attach Volume Device过滤
文件写请求。



后续：
――


Rainbow应该兼容Linux和Windows两种操作系统。随着系统的不断完善，更多的功能会被
加入到系统当中，比如：容错、管理、审计、权限、多用户等。
