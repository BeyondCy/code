文档名称：关于Time的只言片语
文档维护：welfear@gmail.com
文档日期：2010.6.7


今天去图书馆遇到了骗子，我说报警之后他们就离开了。本来写这个东西就够让人
闹心的了，遇到这么个事差点冲动。话说回来，想理清各种标准的关系以及复杂的
人类历法和宗教历史真是令人痛苦。我不打算搞了，下面这些只能算是零散的笔记。
做快乐的傻瓜？做痛苦的智者？

Real time:
人们在墙上的壁钟里看到的时间。用于测量绝对时间，由操作系统在初始化时
从CMOS中读取，并允许用户自由设置。

Monotonic time:
操作系统实际运行的时间。用于测量相对时间，由硬件时间源时时更新。

Linux Kernel 2.6有如下系统调用接口支持时间操作：

long sys_time(time_t *);
get xtime->ts_sec;

long sys_stime(time_t *);
set xtime->ts_sec;

time_t用于容纳真实时间的秒数。它的定义为：

typedef long time_t;
如果time_t是一个32位的整数，它最多能容纳2,147,483,647(0x80000000 - 1)秒。
那么到2038-01-18 22:14:07来临之时，32位系统又会经历混乱。

struct timeval {
        long tv_sec;
        long tv_usec;
};

long sys_gettimeofday(struct timeval *, struct timezone *);
long sys_settimeofday(struct timeval *, struct timezone *);

long sys_adjtimex(struct timex *);
long sys_times(struct tms *);

struct timespec {
        long ts_sec;
        long ts_nsec;
} xtime;

xtime用于保存Unix time，由秒数和纳秒数组成。根据精度不同，纳秒会转成微秒。
Unix time时间系统将绝对时间定义为从1970年1月1日00:00:00 UTC所经历的时间。

CMOS中的Real Time Clock能在IRQ8产生2~8192 Hz的中断。内核通过0x70和0x71两个
端口访问RTC，获得墙上时间，包括年、月、周、天、小时、分、秒。

要讨论1752年之前的日期，既要知道事件发生在何处，又要知道使用的儒略历还是
格列高利历。Lilian Day定为1582年10月15日，ANSI Date定为1601年1月1日。
因此，Windows NT采用ANSI Date，换算从1601年到当前时间经历的秒数。而Linux
则采用Posix Time，也就是Unix Time，换算从1970年到当前时间经历的秒数。
Linux Kernel实现了内核态的mktime，而用户态程序则需要通过系统调用获得数据。
Windows NT则为用户态程序设置可读不可写的SharedUserData，这片空间里保存了
包括时间在内的各种常用数据。

系统不仅需要时间长度，还需要时间精度。时间精度可以表示为微秒和纳秒级别。
在Linux Kernel 2.6之前，x86平台默认时钟频率是100Hz，之后被调整到了1000Hz，
也有的版本是250Hz。时钟滴答从10ms调整到1ms后，系统的响应时间缩短，但也增加
了系统负担。Solaris 10默认时钟滴答是10ms，而Windows NT默认时钟滴答是1ms。
在NT里，NtGetTickCount返回Tick的值，类型为ULONG。无论Linux还是Windows NT，
一般进程调度的时间片大概在20ms~50ms之间。Linux最小时间单位是ns，Windows NT
最小时间单位是100ns。最新的高精度事件定时器(HPET)由Intel和Microsoft两公司
在2005年联合开发。它的精度也是100ns，NT倒是有远见嘛。HPET将来会取代PIT。
PIT通常是使用0x40~0x43端口的8254 CMOS芯片。给PIT的内部频率设置为1193182，
即可使系统获得1ms的时间中断。

用户态使用C库函数：

为了阅读方便，C标准库提供了tm结构和一些Unix时间与字符串之间的转换函数。

struct tm {
        int tm_sec;     //[0-59] leap second 61.
        int tm_min;     //[0-59]
        int tm_hour;    //[0-23]
        int tm_mday;    //[0-31]
        int tm_mon;     //[0-11]
        int tm_year;    //from 1900
        int tm_wday;    //[0-6]
        int tm_yday;    //[0-365]
        int tm_isdst;   //+ DST 0 not DST - unknown
        int tm_gmtoff;  //GMT Offset
        int tm_zone;    //zone
};


获得当前时间：


time_t time(time_t *);
int gettimeofday(struct timeval *, struct timezone *);


设置当前时间：


int stime(time_t *);
int settimeofday(const struct timeval *, const struct timezone *);

设置当前时间。设置时间需要管理员权限。
这些函数从1900年开始，考虑闰年而不考虑闰秒。


更新文件时间：


int utime(const char *filename, const struct utimbuf *times);
int utimes(const char *filename, const struct timeval times[2]);

更新时间。


获得时钟节拍：


clock_t clock(void);

获得当前进程的时钟滴答数。用户态程序使用固定值CLOCKS_PER_SEC为100。
Linux程序可以使用sysconf(_SC_CLK_TCK)获得POSIX ABI值.对于x86，返回值为100。

clock_t times(struct tms *);
struct tms {
        clock_t tms_utime;
        clock_t tms_stime;
        clock_t tms_cutime;
        clock_t tms_cstime;
};

times返回当前进程的用户态节拍和内核态节拍以及子进程的用户态节拍
和内核态节拍。


转换为字符串：


char *asctime(const struct tm *);
char *asctime_r(const struct tm *, char *);

char *ctime(const time_t *);
char *ctime_r(const time_t *, char *);

asctime和ctime并不是线程安全的。
asctime_r和ctime_r需要调用者提供至少26个字符的局部缓冲区以保证线程安全。
ctime返回的字符串添加了换行符。


转换为tm：


struct tm *gmtime(const time_t *);
struct tm *gmtime_r(const time_t *, struct tm *);

struct tm *localtime(const time_t *);
struct tm *localtime_r(const time_t *, struct tm *);
time_t mktime(struct tm *);

gmtime和localtime并不是线程安全的。
gmtime_r和localtime_r需要调用者提供相应的局部缓冲区以保证线程安全。


转化为time_t：


time_t mktime(struct tm *);
double difftime(time_t, time_t);


天数和日期转换：


Linux Kernel用算法计算，Windows NT查表。

日期转换为天数：

Linux Kernel算法如下：

if (0 >= (int)(mon -= 2)) {
        mon += 12;
        year -= 1;
}

days =
year/4 - year/100 + year/400 +
(year-1)*365 +
30*mon - 30 + (mon+mon/6)/2 + day-1 + 59
- 719162;

第一行计算由于闰年多出来的天数。
第二行计算平年的天数。
第三行计算月份的天数，59是一月和二月的天数，这样从3月到2月，
前6个月是奇数月31天，偶数月30天，后6个月相反。mon/2为每两个月加一天，
mon/6为过了6月份，调整奇数或偶数月份的步调。
719162是根据相同算法计算1970年经过的天数。
为了便于理解，打印出(mon+mon/6)/2随月份mon的值：
1  2  3  4  5  6  7  8  9  10  11  12
0  1  1  2  2  3  4  4  5   5   6   7

Windows NT算法如下：

Linux Kenrel的算法巧妙的计算了月份对应的天数，Windows NT直接使用下面的
两个数组，平年一个，闰年一个，方法很简单：
(year % 400 == 0) || ((year % 100 != 0) && (year % 4 == 0))

LeapYear:
0,                                 // January
31,                                // February
31+29,                             // March
31+29+31,                          // April
31+29+31+30,                       // May
31+29+31+30+31,                    // June
31+29+31+30+31+30,                 // July
31+29+31+30+31+30+31,              // August
31+29+31+30+31+30+31+31,           // September
31+29+31+30+31+30+31+31+30,        // October
31+29+31+30+31+30+31+31+30+31,     // November
31+29+31+30+31+30+31+31+30+31+30,  // December
31+29+31+30+31+30+31+31+30+31+30+31};

NormalYear:
0,                                 // January
31,                                // February
31+28,                             // March
31+28+31,                          // April
31+28+31+30,                       // May
31+28+31+30+31,                    // June
31+28+31+30+31+30,                 // July
31+28+31+30+31+30+31,              // August
31+28+31+30+31+30+31+31,           // September
31+28+31+30+31+30+31+31+30,        // October
31+28+31+30+31+30+31+31+30+31,     // November
31+28+31+30+31+30+31+31+30+31+30,  // December
31+28+31+30+31+30+31+31+30+31+30+31};


天数转换为日期：

因为ANSI Date是周一，所以星期数为(day + 1) % 7。

根据400年、100年、4年计算天数中包含了多少个整400年、整100年，整4年。
计算整年的公式是：

365*year + year/4 - year/100 + year/400;

分别带入400、100、4得到如下宏：

#define DAY_OF_LEAP_YEAR 146097 //365*400 + 400/4 - 400/100 + 400/400
#define DAY_OF_100YEAR   36524  //365*100 + 100/4 - 100/100
#define DAY_OF_4YEAR     1461   //365*4 + 4/4

例如计算每400年的天数：
number = day / DAY_OF_LEAP_YEAR;
day -= number * DAY_OF_LEAP_YEAR;

计算整100年需要注意被除数为36524.25：
365*100 + 100/4 - 100/100 + 100/400
除数为day + 3/4(1年的时间是按照365.25计算的，为了除法准确而补足0.75天)，
因为因此，计算表达式为：
(day * 100 + 75) / 3652425

day_of_year = n_400s*400 + n_100s*100 + n_4s*4 + (day*100+75)/36525;

day - day_of_year就是不足一年的天数，查表得月份，再根据月份查表得天数。
同样根据平年和闰年，天数和月份也有两组对应的数组。

Leap366:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,\
                                    10,10,10,10,10,10,10,10,10,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,
                                 11,11,11,11,11,11,11,11,11,11};

Normal365:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,\
                                    10,10,10,10,10,10,10,10,10,
11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,\
                                11,11,11,11,11,11,11,11,11,11};
